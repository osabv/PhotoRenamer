package photo_renamer;

import static org.junit.Assert.*;

import org.junit.Test;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.HashMap;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class TagsManagerTest {

	private final static String TEST_IMAGE_FOLDER = ".";
	private TagsManager testTM;

	/**
	 * Sets up a new tags manager
	 * 
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp(String s) throws Exception {
		testTM = new TagsManager(s);
	}

	/**
	 * Deletes any files generated by TagsManager, and empties out its tags.
	 * 
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown(String s) throws Exception {

		testTM.tags = null;
		for (File f : new File(TEST_IMAGE_FOLDER).listFiles()) { // Clean .ser
																	// files
			if (f.getName().equals(s)) {
				f.delete();
			}
		}
	}

	/**
	 * Test method for adding a tag.
	 * 
	 * {@link photo_renamer.TagsManager#addTag(java.lang.String)}.
	 * 
	 * @throws Exception
	 */
	@Test
	public void testAddTag() throws Exception {
		// tearDown();
		setUp("addTagTest");
		// Add one convential tag, see if testTM.tags contains it
		testTM.addTag("testTag");
		assert (testTM.tags.containsKey("testTag"));

		// Add tag twice, see if testTM.tags handles it accordingly
		testTM.addTag("testTag");
		assert (testTM.tags.containsKey("testTag"));

		// Add a second tag and make sure both are contained
		testTM.addTag("testTag2");
		assert (testTM.tags.containsKey("testTag"));
		assert (testTM.tags.containsKey("testTag2"));

		// Add tag with a space, make sure rest are still contained
		testTM.addTag("test Tag");
		assert (testTM.tags.containsKey("testTag"));
		assert (testTM.tags.containsKey("testTag2"));
		assert (testTM.tags.containsKey("test Tag"));

		// Try tag that's just a single letter
		testTM.addTag("a");
		assert (testTM.tags.containsKey("testTag"));
		assert (testTM.tags.containsKey("testTag2"));
		assert (testTM.tags.containsKey("test Tag"));
		assert (testTM.tags.containsKey("a"));

		// Try tag that's not a letter
		testTM.addTag("1");
		assert (testTM.tags.containsKey("testTag"));
		assert (testTM.tags.containsKey("testTag2"));
		assert (testTM.tags.containsKey("test Tag"));
		assert (testTM.tags.containsKey("a"));
		assert (testTM.tags.containsKey("1"));

		tearDown("addTagTest");

	}

	/**
	 * Test method for removing a tag.
	 * 
	 * {@link photo_renamer.TagsManager#removeTag(java.lang.String)}.
	 * 
	 * @throws Exception
	 */
	@Test
	public void testRemoveTag() throws Exception {

		// tearDown();
		setUp("testRemoveTag");
		// Add one conventional tag, see if testTM.tags removes it
		testTM.addTag("testTag");
		assert (testTM.tags.containsKey("testTag"));
		testTM.removeTag("testTag");
		assert (!testTM.tags.containsKey("testTag"));

		// Add two second tags, see if one is successuly removed
		testTM.addTag("testTag2");
		testTM.addTag("testTag");
		assert (testTM.tags.containsKey("testTag") && testTM.tags.containsKey("testTag2"));
		testTM.removeTag("testTag2");
		assert (!testTM.tags.containsKey("testTag2"));

		tearDown("testRemoveTag");
	}

	/**
	 * Test method for {@link photo_renamer.TagsManager#writeTags()}.
	 * 
	 * @throws Exception
	 */
	@Test
	public void testWriteTags() throws Exception {

		// tearDown();
		String path = "writeTagsTest";
		setUp(path);

		testTM.addTag("new tag");
		testTM.addTag("tag2");
		HashMap<String, Integer> currentTags = testTM.tags;
		File directory = new File(TEST_IMAGE_FOLDER);
		boolean foundAllSameTags = false;
		for (File f : directory.listFiles()) {
			if (f.getName().equals(path)) {
				FileInputStream fis = new FileInputStream(path);
				ObjectInputStream in = new ObjectInputStream(fis);
				@SuppressWarnings("unchecked")
				HashMap<String, Integer> readInTags = (HashMap<String, Integer>) in.readObject();
				in.close();
				fis.close();
				if (readInTags.equals(currentTags)) {
					foundAllSameTags = true;
				}
			}
		}
		assert (foundAllSameTags);

		tearDown(path);
	}

	/**
	 * Test method for {@link photo_renamer.TagsManager#readTags()}.
	 * 
	 * @throws Exception
	 */
	@Test
	public void testReadTags() throws Exception {
		// tearDown();
		String path = "readTagsTest";
		setUp(path);
		testTM.addTag("new");
		testTM.addTag("new2");
		HashMap<String, Integer> expectedTags = testTM.tags;
		File directory = new File(TEST_IMAGE_FOLDER);
		boolean foundAllSameTags = false;
		for (File f : directory.listFiles()) {
			if (f.getName().equals(path)) {
				FileInputStream fis = new FileInputStream(path);
				ObjectInputStream in = new ObjectInputStream(fis);
				@SuppressWarnings("unchecked")
				HashMap<String, Integer> readInTags = (HashMap<String, Integer>) in.readObject();
				in.close();
				fis.close();
				if (readInTags.equals(expectedTags)) {
					foundAllSameTags = true;
				}
			}

		}
		assert (foundAllSameTags);

		tearDown(path);
	}

}
